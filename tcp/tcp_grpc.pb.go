// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: tcp/tcp.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TcpClient is the client API for Tcp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TcpClient interface {
	SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Empty, error)
	RecvPacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packet, error)
}

type tcpClient struct {
	cc grpc.ClientConnInterface
}

func NewTcpClient(cc grpc.ClientConnInterface) TcpClient {
	return &tcpClient{cc}
}

func (c *tcpClient) SendPacket(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/main.Tcp/SendPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcpClient) RecvPacket(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/main.Tcp/RecvPacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcpServer is the server API for Tcp service.
// All implementations must embed UnimplementedTcpServer
// for forward compatibility
type TcpServer interface {
	SendPacket(context.Context, *Packet) (*Empty, error)
	RecvPacket(context.Context, *Empty) (*Packet, error)
	mustEmbedUnimplementedTcpServer()
}

// UnimplementedTcpServer must be embedded to have forward compatible implementations.
type UnimplementedTcpServer struct {
}

func (UnimplementedTcpServer) SendPacket(context.Context, *Packet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPacket not implemented")
}
func (UnimplementedTcpServer) RecvPacket(context.Context, *Empty) (*Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvPacket not implemented")
}
func (UnimplementedTcpServer) mustEmbedUnimplementedTcpServer() {}

// UnsafeTcpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcpServer will
// result in compilation errors.
type UnsafeTcpServer interface {
	mustEmbedUnimplementedTcpServer()
}

func RegisterTcpServer(s grpc.ServiceRegistrar, srv TcpServer) {
	s.RegisterService(&Tcp_ServiceDesc, srv)
}

func _Tcp_SendPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServer).SendPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tcp/SendPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServer).SendPacket(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tcp_RecvPacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcpServer).RecvPacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tcp/RecvPacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcpServer).RecvPacket(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Tcp_ServiceDesc is the grpc.ServiceDesc for Tcp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tcp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Tcp",
	HandlerType: (*TcpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPacket",
			Handler:    _Tcp_SendPacket_Handler,
		},
		{
			MethodName: "RecvPacket",
			Handler:    _Tcp_RecvPacket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcp/tcp.proto",
}
